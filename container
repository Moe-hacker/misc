#!/data/data/com.termux/files/usr/bin/bash
#注释全是塑料英语，没基础的别看了。
#咱就是说用着必应翻译写注释是什么感觉。
#您可能看到：分体式设计，只调用其他函数的空壳函数，脑溢血功能实现
#Ignore ctrl-C signal,because it's a shell-like console.
trap "" SIGINT
#RGB color for output.
RGB="166;227;161"
#Defile output color.
COLOR="\033[1;38;2;${RGB}m"
#Adapt the screen resolution and make some output in the middle of the screen.
LINE=$(($(($(stty size|awk '{print $2}')))/2-22))
#Greeting message.
#There is no indentation here because it will cause bug of $HOPPOU and it's no need to do this. 
CONSOLE_GREETING(){
#An easter Egg.
HOPPOU="\033[30m\033[${LINE}C               ▅▅▀▀▀▀▀▀▀▀▀▀▀▀▅
\033[${LINE}C          ▅▅▀▀▀               ▀▀▅▅
\033[${LINE}C     ▅▅▅▀▀            ▅           ▀▅
\033[${LINE}C      ▅▀      ▅▀█▅▅▀▀▅▀▅        ▅▅  ▀▅
\033[${LINE}C     ▅▀   █▅▀▀  ▀     ▀ ▀▀▅▅    █ ▀▀▅ █
\033[${LINE}C    ▅▀   ▅▀  ▅▀      ▀▅    ▀▅   █▅███▀█
\033[${LINE}C  ▅▅█▀▅ █ ▅▅▀          ▀▀   █   ████   █
\033[${LINE}C      █ █ ▅▅▅▅▅        ▅▅▅▅▅ █  ▀█▀    █
\033[${LINE}C      █ █▀ ▅▅▅ ▀      ▀ ▅▅▅ ▀█   █     █
\033[${LINE}C      █ █ █\033[40;31m█▀█\033[0m\033[30m█        █\033[40;31m█▀█\033[0m\033[30m█ █   █     █
\033[${LINE}C     █  █ █\033[31m███\033[30m█        █\033[31m███\033[30m█ █   █     ▀▅
\033[${LINE}C    ▅▀  █  ▀▀▀          ▀▀▀  █   █      █
\033[${LINE}C  ▅▀▅▀ █                     █   █      █
\033[${LINE}C █   █ ▀▅ ▅▀▅   ▅▀▅   ▅▅     █   █      ▀▅
\033[${LINE}C▅█▅▅██▅ ▅██  ▀███ ▅████ ▀▅█▀▅▀   █       ▀▅
\033[${LINE}C███████ ▀██████████████████▀▀             █
\033[${LINE}C █    ▀▅  ██▀ ▀██▀▀██▀▀██▀█     █▀         █
\033[${LINE}C ▀▅     ▀▀█              ▅▀     █          █
\033[${LINE}C   ▀▅    █               █     ██        ▅▀
\033[${LINE}C     ▀▅▅▅▀                ▀▀▀▀▀ █        █
\033[${LINE}C        ▀                       ▀        ▀
\033[${LINE}C           「Keep moe,keep cool」
"
printf "${HOPPOU}"
#Information.
echo -e "${COLOR}Console of Termux-container"
echo -e "$(date)"
kernelVersion="$(uname -r)"
kernelMajor="${kernelVersion%%.*}"
kernelMinor="${kernelVersion#$kernelMajor.}"
kernelMinor="${kernelMinor%%.*}"
kernelMinor2="${kernelVersion#*$kernelMinor.}"
kernelMinor2="${kernelMinor2%%-*}"
echo -e "Linux kernel version: $kernelMajor.$kernelMinor.$kernelMinor2"
echo -e "Copyright 2022 Moe-hacker"
echo -e "For usage,just type \`help\`"
echo ""
}


#Help page for container console.
#TODO
SHOW_HELPS(){
  echo "Usage:"
  echo "  help :show this page."
  echo "  exit/CTRL-D :exit containershell."
}
#Get cpu arch of device.
GET_CPU_ARCH(){
  #A smart way to get cpu architecture from Tmoe
  DPKG_ARCH=$(dpkg --print-architecture)
  case ${DPKG_ARCH} in
    armel) export ARCH="armel" ;;
    armv7* | armv8l | armhf | arm) export ARCH="armhf" ;;
    aarch64 | arm64* | armv8* | arm*) export ARCH="arm64" ;;
    #No need to write this,but we keep this part.
    i*86 | x86) export ARCH="i386" ;;
    x86_64 | amd64) export ARCH="amd64" ;;
    #Exit here because we can't continue creating containers.
    *) echo -e "\033[33mUnknow cpu architecture for this device !\033[0m"&&exit 1 ;;
  esac
  return 0
}
#Search lxc-image mirror for images.
SEARCH_IMAGES(){
  OS=$1
  if [[ $2 = "" ]];then
    GET_CPU_ARCH
  else
    ARCH=$2
  fi
  echo "For ParrotOS,please just use version \"current\"."
  echo "Searching for images,this might take a while......"
  if [[ $(curl -sL "http://images.linuxcontainers.org/images/$OS"|grep "404 Not Found") != "" ]];then
    echo -e "\033[33mOS distro not found.\033[0m"
    #End this function with error code 1
    return 1
  fi
  #Search if the distro have current cpu arch support.
  for i in $(curl -sL "http://images.linuxcontainers.org/images/$OS"|grep "DIR"|sed -E 's@<a (href)@\n\1@g'| awk -F 'href=' '{print $2}' | cut -d '"' -f 2 |cut -d "/" -f 1);do
    if [[ $(curl -sL "http://images.linuxcontainers.org/images/$OS/$i/$ARCH"|grep "404 Not Found") = "" ]];then
      found_arch=1
      echo -e "\033[34m$OS [$ARCH] : $i"
    fi
  done
  #Return an error message instead of none.
  if [[ $found_arch != 1 ]];then
    echo -e "\033[33mCould not found image for current cpu architecture,maybe you should choose another cpu architecture and use proot to run cross-arch container.\033[0m"
    return 1
  fi
  #return 0 if no errors is a good habit.
  return 0
}
#An interface for debugging and getting root permissions.
#We need to support devices without root and running all parts of the script with root permissions is no need,so we get root permissions here for functions needed.
#Not a bug,if you haven't a better way to implement this function,just keep this.
EXEC_FUNCTION(){
  $@
}
#Just call other functions here.
CONTAINER_CONSOLE_MAIN(){
  case $1 in
    "help") SHOW_HELPS;;
    "search") SEARCH_IMAGES $2 $3;;
    "login") RUN_CONTAINER $2;;
    "exit") echo -e "\nExit.\033[0m"&&exit;;
    *) echo -e "\033[31mERR:Unknow command,type \`help\` to show helps.\033[0m"
  esac
}
#A loop.
#Get commands to run.
CONTAINER_CONSOLE(){
  while :
  do
    printf "${COLOR}"
    read -p "Console > " COMMAND
    #Catch EOF(CTRL-D) signals and exit normally.
    if [[ $? != 0 ]];then
      echo -e "\n\nExit."
      printf "\033[0m"
      exit 0
    fi
    #Call main function of the Console.
    CONTAINER_CONSOLE_MAIN ${COMMAND}
  done
}
#Usage of script `container`
SHOW_USAGE(){
  LINE=$(($(($(stty size|awk '{print $2}')))/2-23))
  echo -e "\033[${LINE}C              \e[38;5;157m┌───────────┐"
  echo -e "\033[${LINE}C              │ ┌───────┐ │"
  echo -e "\033[${LINE}C              │ │  \e[38;5;227m┌───────────┐"
  echo -e "\033[${LINE}C              \e[38;5;157m│ │  \e[38;5;227m│ ┌───────┐ │"
  echo -e "\033[${LINE}C              \e[38;5;157m│ │  \e[38;5;227m│ │  \e[38;5;157m│ │  \e[38;5;227m│ │"
  echo -e "\033[${LINE}C              \e[38;5;157m│ └──\e[38;5;227m│ │\e[38;5;157m──┘ │  \e[38;5;227m│ │"
  echo -e "\033[${LINE}C              \e[38;5;157m└────\e[38;5;227m│ │\e[38;5;157m────┘  \e[38;5;227m│ │"
  echo -e "\033[${LINE}C                   \e[38;5;227m│ └───────┘ │"
  echo -e "\033[${LINE}C                   \e[38;5;227m└───────────┘"
  echo -e "\033[${LINE}C${COLOR}═╔╝╔═╝╔═║╔╔ ║ ║║ ║  ╔═╝╔═║╔═ ═╔╝╔═║╝╔═ ╔═╝╔═║"
  echo -e "\033[${LINE}C ║ ╔═╝╔╔╝║║║║ ║ ╝ ═╝║  ║ ║║ ║ ║ ╔═║║║ ║╔═╝╔╔╝"
  echo -e "\033[${LINE}C ╝ ══╝╝ ╝╝╝╝══╝╝ ╝  ══╝══╝╝ ╝ ╝ ╝ ╝╝╝ ╝══╝╝ ╝"
  SIZE=$(stty size|awk '{print $2}')
  let SIZE=$(($SIZE))
  echo -e "\e[1;48;5;2;${RGB}m$(yes " "|sed $SIZE'q'|tr -d '\n')\033[0m"
  echo -e "${COLOR}Usage:"
  echo -e " container                       #Start container console."
  echo -e " container -h                    #Show this page"
  echo -e " container -b [Containerfile]    #Build a container using Containerfile."
  echo -e " container -e [function]         #exec function in this script *NOT for user."
}
#The script start running here.
case $1 in
    "-h") SHOW_USAGE;;
    "-e") EXEC_FUNCTION ${@:2};;
    "-b") CONTAINER_BUILD $2;;
    "") CONSOLE_GREETING&&CONTAINER_CONSOLE;;
    *) SHOW_USAGE&&exit 1;;
esac